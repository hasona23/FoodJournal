@using FoodJournal.Client.Services
@inject IMealAPIService mealService
@inject IFoodAPIService foodService
@inject IDialogService  dialogService
@page "/meals"

<span class="d-inline">

    <MudText style="margin-right:5px" Typo="Typo.h3">
        Meals
        
        <MudIconButton @onclick="CreateAsync" Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">

        </MudIconButton>
    </MudText>
</span>
<MealSearchBar @ref="searchBar"></MealSearchBar>
@if(_starredMeals != null)
{
    <MudContainer>
        <MudStack Row="true" Spacing="4" Wrap="Wrap.NoWrap">

        @foreach (var meal in _starredMeals)
        {
            <MudButton style="width:25%">
                <MudCard style="width:100%">
                    <MudCardContent class="d-flex justify-content-center align-items-center ">
               
                        <MudText>@meal.Name</MudText>

                    </MudCardContent>
                    <MudCardActions class="d-inline-flex align-items-center justify-content-center">
                       
                        <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Success" 
                                        OnClick="@(async ()=>{await mealService.CreateMeal(new MealCreateDTO(meal.Name,false,DateTime.Now,meal.MealType,meal.Foods));await LoadMeals();})"></MudIconButton>

                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Warning"
                                       OnClick="@(()=>UpdateAsync(meal))"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"
                                       OnClick="@(()=>DeleteAsync(meal))"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Star" Color="Color.Warning"
                                       OnClick="@(()=>UnStarAsync(meal))"></MudIconButton>
                    </MudCardActions>
                </MudCard>
            </MudButton>
        }
        </MudStack>
    </MudContainer>
}
@if (_unstarredMeals != null)
{
    var mealsToView = @_unstarredMeals.Where(m => searchBar.MealMeetsCriteria(m)).ToList();
    <MudText>Meals Count: @mealsToView.Count</MudText>

    <MudTable Items="@mealsToView" Hover="true"
    Breakpoint="Breakpoint.Sm" Loading="@_loading"
    LoadingProgressColor="Color.Info">

        <ColGroup>
            <col style="width: 20%;" />
            <col style="width: 10%" />
            <col style="width: 20%;" />
            <col style="width:30%"/>
            <col style="width: 20%" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<MealGetDTOWithFoods, object>(x => x.Name)">Name</MudTableSortLabel> </MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<MealGetDTOWithFoods, object>(x => x.MealType)">Meal Type</MudTableSortLabel></MudTh>
            <MudTh>Ingredients</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<MealGetDTOWithFoods, object>(x => x.DateEaten)">Date Eaten</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Meal Type">@Enum.GetName(context.MealType)</MudTd>
            <MudTd DataLabel="Ingredients">
                @if(context.Foods.Any())
                {
                    Random random = new();
                    Color[] colorsOptions = [Color.Error, Color.Info, Color.Success, Color.Warning];
                    @foreach(var food in context.Foods)
                    {

                        <MudChip Value="@food.Name" Color="colorsOptions[random.Next(0,colorsOptions.Length)]"></MudChip>

                    }
                }
                else
                {
                    <MudText>None</MudText>
                }
            </MudTd>
            
            <MudTd DataLabel="Date">
                <MudText>@context.DateEaten.ToString("dd/MM/yyyy")</MudText>
            </MudTd>
            <MudTd DataLabel="">
                <span class="d-inline">
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"
                    OnClick="@(()=>DeleteAsync(context))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Warning"
                    OnClick="@(()=>UpdateAsync(context))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.StarOutline" Color="Color.Warning"
                                   OnClick="@(()=>StarAsync(context))"></MudIconButton>
                </span>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            
            <MudTablePager PageSizeOptions="new int[]{10,25,50}">

            </MudTablePager>
        </PagerContent>
    </MudTable>
}
@code {


    private List<MealGetDTOWithFoods>? _unstarredMeals;
    private List<MealGetDTOWithFoods>? _starredMeals;
    private List<FoodGetDTO> _foods;
    private bool _loading = false;
    private MealSearchBar searchBar;
    protected override async Task OnInitializedAsync()
    {

        await LoadMeals();
        _foods = (await GetAllFoodItems()).ToList();
        searchBar.OnChange += StateHasChanged;

    }
    private async Task LoadMeals()
    {
        _loading = true;
        var meals = await mealService.FetchAllMeals();
        _unstarredMeals = meals.Where(m => !m.IsStarred).ToList();
        _starredMeals = meals.Where(m => m.IsStarred).ToList();
        _loading = false;
    }
    public async Task StarAsync(MealGetDTOWithFoods meal)
    {
        await mealService.UpdateMeal(meal.Id,new MealUpdateDTO(meal.Id,meal.Name,true,meal.DateEaten,meal.MealType,meal.Foods));
        await LoadMeals();
    }
    public async Task UnStarAsync(MealGetDTOWithFoods meal)
    {
        await mealService.UpdateMeal(meal.Id,new MealUpdateDTO(meal.Id,meal.Name,false,meal.DateEaten,meal.MealType,meal.Foods));
        await LoadMeals();
    }
    private async Task CreateAsync()
    {

        var paramters = new DialogParameters<UpdateMealDialog>()
        {
            { x=> x.FoodItems,await GetAllFoodItems()}
        };
        var dialog = await dialogService.ShowAsync<CreateMealDialog>("Create",paramters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled )
        {
            if(result.Data is MealCreateDTO meal)
            {
                await mealService.CreateMeal(meal);
                await LoadMeals();
            }

        }
    }
    private async Task UpdateAsync(MealGetDTOWithFoods meal)
    {

        var paramters = new DialogParameters<UpdateMealDialog>()
        {
            { x => x.OldMealData,meal},
            { x=> x.FoodItems,await GetAllFoodItems()}

        };
        var dialog = await dialogService.ShowAsync<UpdateMealDialog>("Delete", paramters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {   if (result.Data is MealUpdateDTO newMeal)
            {
                await mealService.UpdateMeal(meal.Id, newMeal);
                await LoadMeals();
            }
        }

    }

    private async Task DeleteAsync(MealGetDTOWithFoods mealItem)
    {

        var paramters = new DialogParameters<DeleteMealDialog>()
        {

            { x=>x.MealItem,mealItem}
        };

        var dialog = await dialogService.ShowAsync<DeleteMealDialog>("Delete", paramters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await mealService.DeleteMeal(mealItem.Id);
            await LoadMeals();
        }
    }
    private async Task<IEnumerable<FoodGetDTO>> GetAllFoodItems()
    {
        return (await foodService.FetchAllFoods()).Select(f => new FoodGetDTO(f.Id,f.Name));
    }
}
